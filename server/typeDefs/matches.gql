type Query {
    match(id: ID!): Match!
    matches(filter: MatchFilter): [Match!]!
}

type Mutation {
    createMatch(input: CreateMatchInput!): Match!
    openMatch(input: OpenMatchInput!): Match!
    joinMatch(id: ID!): Match!
    startMatch(id: ID!): Match!
    pushActions(input: PushActionsInput!): Match!
    createMessage(input: CreateMessageInput!): Match!
}

type Subscription {
    matchOpened: Match!
    playerJoined: Match!
    matchStarted: Match!
    actionsPushed: Match!
    messageCreated: Match!
}

type Match {
    id: ID!
    status: MatchStatus!
    handle: String!
    actions: [Action!]!
    participants: [MatchParticipant!]!
    players: [User!]!
    creator: User!
    messages: [MatchMessage!]!
    options: [MatchOption!]!
}

type MatchParticipant {
    match: Match!
    player: User!
    confirmed: Boolean!
    scores: JSON
}

type MatchMessage {
    id: ID!
    match: Match!
    author: User!
    text: String!
    createdAt: DateTime!
}

type MatchOption {
    match: Match!
    type: String!
    values: JSON!
}

type Action {
    index: Int!
    randomSeed: String
    type: Int!
    payload: JSON
    match: Match!
    player: User
}

enum MatchStatus {
    SETTING_UP
    OPEN
    ACTIVE
    FINISHED
}

input MatchFilter {
    status: MatchStatus
}

input CreateMatchInput {
    handle: String!
}

input OpenMatchInput {
    id: ID!
    options: [MatchOptionInput!]!
}

input MatchOptionInput {
    type: String!
    values: JSON!
}

input PushActionsInput {
    id: ID!
    actions: [ActionInput!]!
}

input ActionInput {
    type: Int!
    payload: JSON
}

input CreateMessageInput {
    id: ID!
    text: String!
}
